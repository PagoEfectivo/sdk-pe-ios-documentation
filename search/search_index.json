{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PagoEfectivo SDK para iOS Overview PagoEfectivoSDK le permitir\u00e1 implementar de forma r\u00e1pida y sencilla las funcionalidades que ofrece para realizar transacciones online a trav\u00e9s de la plataforma de PagoEfectivo para iOS. En el siguiente manual encontrar\u00e1 todo lo necesario para poder realizar la implementaci\u00f3n del SDK, as\u00ed como la forma correcta de implementar sus principales funciones tales como Generar un CIP y Listar CIPs . Pre requisitos Xcode 9+ iOS 11+ Instalaci\u00f3n Es recomendable usar CocoaPods para instalar el SDK: V\u00eda CocoaPods Es necesario tener instalado el gestor de paqueter\u00eda, para ello debes ir a la p\u00e1gina web de cocoapods , instalar CocoaPods y luego puedes continuar con los siguientes pasos. Paso 1: V\u00eda terminal, ubicarse en la carpeta del proyecto, donde se encuentra el archivo de extensi\u00f3n .xcodeproj Paso 2: Una vez ubicado en la carpeta del proyecto, ejecutar el siguiente comando: $ pod init Paso 3: Agrega la siguiente l\u00ednea de c\u00f3digo al archivo Podfile : 1 pod \"PagoEfectivoSDK\" Paso 5: Instala el pod y abre el archivo de extensi\u00f3n .xcworkspace : $ pod install $ open yourProject.xcworkspace V\u00eda manual Paso 1: Descargar el archivo PagoEfectivoSDK.framework Paso 2: Abrir tu proyecto con Xcode y agregar el archivo a las secciones Embedded Binaries en el target principal de tu proyecto Aqu\u00ed te dejamos un ejemplo de c\u00f3mo debe agregarse de forma manual: Configuraci\u00f3n Para poder hacer uso del SDK es necesario configurar nuestro proyecto seg\u00fan el lenguaje. A continuaci\u00f3n te mostramos como hacerlo con Objective-C o Swift: Objective-C Para hacer uso de los m\u00e9todos del SDK de PagoEfectivo bajo un proyecto en Objective-C , debes importar el m\u00f3dulo de PagoEfectivoSDK en el archivo AppDelegate.m del proyecto: 1 #import <PagoEfectivoSDK/PagoEfectivoSDK.h> Swift Crear el archivo MyProject -Brigding-Header.h , y establecer la ruta de este archivo en la directiva Objective-C Bridging Header que se encuentra en la secci\u00f3n Build Settings en el target principal del proyecto. Paso 1: En el archivo MyProject -Brigding-Header.h agregar lo siguiente: 1 #import <PagoEfectivoSDK/PagoEfectivoSDK.h> Paso 2: En el archivo AppDelegate.swift agregar lo siguiente: 1 import PagoEfectivoSDK Inicializaci\u00f3n Para poder hacer uso de las funciones que ofrece el SDK, es necesario inicializar la librer\u00eda. Para ello debes tener estos valores previamente: Service Id Access Key Secret Key Info Si a\u00fan no tienes los valores correspondientes favor de comunicarte aqu\u00ed . Objective-C Se debe agregar el siguiente c\u00f3digo en el m\u00e9todo application que se encuentra en el archivo AppDelegate.m : 1 2 3 [ PagoEfectivoSDK config : @\"MY_SECRET_KEY\" accessKey : @\"MY_ACCESS_KEY\" serviceId : MY_SERVICE_ID ]; Swift Se debe agregar el siguiente c\u00f3digo en el m\u00e9todo application que se encuentra en el archivo AppDelegate.swift : 1 2 3 PagoEfectivoSDK . config ( \"MY_SECRET_KEY\" , accessKey : \"MY_ACCESS_KEY\" , serviceId : MY_SERVICE_ID ) Habilitar el entorno de desarrollo Para poder hacer uso de las funciones que ofrece el SDK en el entorno de desarrollo, es necesario agregar el par\u00e1metro sandbox : Objective-C Se debe agregar el siguiente c\u00f3digo en el m\u00e9todo application que se encuentra en el archivo AppDelegate.m : 1 2 3 4 [ PagoEfectivoSDK config : @\"MY_SECRET_KEY\" accessKey : @\"MY_ACCESS_KEY\" serviceId : MY_SERVICE_ID sandbox : true ]; Swift Se debe agregar el siguiente c\u00f3digo en el m\u00e9todo application que se encuentra en el archivo AppDelegate.swift : 1 2 3 4 PagoEfectivoSDK . config ( \"MY_SECRET_KEY\" , accessKey : \"MY_ACCESS_KEY\" , serviceId : MY_SERVICE_ID , sandbox : true ) Funcionalidades del SDK El SDK provee las siguientes funcionalidades: Generaci\u00f3n de CIP Objective-C 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 //Creamos una nueva instancia de tipo CipRequest CipRequest * request = [ CipRequest alloc ]; //Se establecen las propiedades requeridas [ request setAmount : 100.05 ]; [ request setCurrency : USD ]; [ request setTransactionCode : @\"101\" ]; [ request setUserEmail : @\"jhon@doe.com\" ]; //Opcionales [ request setAdminEmail : @\"foo@bar.com\" ]; [ request setDateExpiry : @\"2000-01-31T05:40:00-05:00\" ]; //Debe ingresarse en formato UTC [ request setPaymentConcept : @\"Pago en tienda\" ]; //El concepto de pago [ request setAdditionalData : @\"Se realiz\u00f3 un pago ... \" ]; //Data adicional [ request setUserName : @\"jhon\" ]; [ request setUserLastName : @\"doe\" ]; [ request setUserUbigeo : @\"010101\" ]; //Formato [ request setUserCountry : @\"PERU\" ]; [ request setUserDocumentType : . DNI ]; //El SDK provee una colecci\u00f3n de tipos de documentType [ request setUserDocumentNumber : @\"00000000\" ]; //Por ejemplo el formato de DNI [ request setUserPhone : @\"999999999\" ]; [ request setUserCodeCountry : @\"+51\" ]; //Creamos una variable que almacene nuestra funci\u00f3n que ir\u00e1 de callback para el servicio serviceCallback __block callbackResponse = ^ ( long status , id receivedData , NSError * error ){ //C\u00f3digo para tratar con la respuesta }; //Usamos la funci\u00f3n de generaci\u00f3n de CIP del SDK [[ PagoEfectivoSDK Cip ] generate : EN requestObject : instanceRequest responseHandler : callbackResponse ]; Swift 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 //creamos una nueva instancia de tipo CipRequest let request = CipRequest () request . amount = 100.05 request . currency = . PEN request . transactionCode = \"101\" request . userEmail = \"jhon@doe.com\" //Opcionales request . adminEmail = \"foo@bar.com\" request . dateExpiry = \"2000-01-31T05:40:00-05:00\" //Debe ingresarse en formato UTC request . paymentConcept = \"Pago en tienda\" //El concepto de pago request . additionalData = \"Se realiz\u00f3 un pago ... \" //Data adicional request . userName = \"jhon\" request . userLastName = \"doe\" request . userUbigeo = \"010101\" //Formato request . userCountry = \"PERU\" request . userDocumentType = . DNI //El SDK provee una colecci\u00f3n de tipos de documentType request . userDocumentNumber = \"00000000\" //Por ejemplo el formato de DNI request . userPhone = \"999999999\" request . userCodeCountry = \"+51\" // Usamos la funci\u00f3n de generaci\u00f3n de CIP del SDK PagoEfectivoSDK . cip (). generate (. EN , requestObject : request , responseHandler : { ( status , result , error ) in //C\u00f3digo para tratar con la respuesta del servicio }) Tratar la respuesta del servicio Swift Obtenci\u00f3n de datos 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 if ( error != nil ){ DispatchQueue . main . async { //Mostramos el error V\u00eda alerta o una vista personalizada. Ejm: self . present ( Help . customAlert ( arrayErrorsForUser : Help . returnErrorFounded ( error : error !), time : 2 ), animated : true , completion : nil ) refresh . stopAnimating () } } else { // Convertimos la respuesta en diccionario guard let dictionary = result as ? [ String : Any ] else { return } guard let data = dictionary [ \"data\" ] as ? [ String : Any ] else { return } // Obtenemos los datos necesarios para nuestra siguiente vista self . dataCip . numberCip = data [ \"cip\" ] as ! Int // Campo: N\u00famero de cip self . dataCip . currencyCip = data [ \"currency\" ] as ! String // Campo: Tipo de moneda self . dataCip . transationCodeCip = data [ \"transactionCode\" ] as ! String // Campo: C\u00f3digo de transacci\u00f3n self . dataCip . amountCip = data [ \"amount\" ] as ! Double // Campo: Monto self . dataCip . dateExpiryCip = data [ \"dateExpiry\" ] as ! String // Campo: Fecha de vencimiento self . dataCip . cipUrl = data [ \"cipUrl\" ] as ! String // Campo: Url de pasarela de pago DispatchQueue . main . async { self . performSegue ( withIdentifier : Global . Segue . showPasarela , sender : self ) refresh . stopAnimating () } } Abrir pasarella en una WebView 1 2 3 4 5 6 7 8 9 override func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { if ( indexPath . row == 0 ) { let webView = WKWebView ( frame : CGRect ( x : 0 , y : 0 , width : self . view . frame . size . width , height : self . view . frame . size . height )) self . view . addSubview ( webView ) let url = URL ( string : self . urlCip . text !) // Url obtenida de la respuesta del cip (data[\"cipUrl\"]) webView . load ( URLRequest ( url : url !)) return } } Consultar CIP(s) Objective-C 1 2 3 4 5 6 7 8 //Definimos un arreglo NSArray * cips = @[ @\"2495383\" , @\"50\" , @\"10\" ] ; //Usamos la funci\u00f3n de b\u00fasqueda de CIPs del SDK [[ PagoEfectivoSDK Cip ] search : cips responseHandler : ^ ( long status , NSMutableArray * cipSearchArray , NSError * error ) { //C\u00f3digo para tratar con la respuesta del servicio }]; Swift 1 2 3 4 5 6 7 8 //Definimos un arreglo let cips :[ String ] = [ \"2495383\" , \"50\" , \"10\" ]; //Usamos la funci\u00f3n de b\u00fasqueda de CIPs del SDK PagoEfectivoSDK . cip (). search ( cips , responseHandler : { ( status , resul , error ) in //C\u00f3digo para tratar con la respuesta del servicio }) Info La documentaci\u00f3n de c\u00f3digo esta disponible para revisar a m\u00e1s detalle las funciones presentadas en esta documentaci\u00f3n. Feedback En caso existan dudas, consultas o mejoras en la gu\u00eda, favor de escribir al correo de feedback con el asunto Documentaci\u00f3n PagoEfectivoSDK.","title":"Home"},{"location":"#pagoefectivo-sdk-para-ios","text":"","title":"PagoEfectivo SDK para iOS"},{"location":"#overview","text":"PagoEfectivoSDK le permitir\u00e1 implementar de forma r\u00e1pida y sencilla las funcionalidades que ofrece para realizar transacciones online a trav\u00e9s de la plataforma de PagoEfectivo para iOS. En el siguiente manual encontrar\u00e1 todo lo necesario para poder realizar la implementaci\u00f3n del SDK, as\u00ed como la forma correcta de implementar sus principales funciones tales como Generar un CIP y Listar CIPs .","title":"Overview"},{"location":"#pre-requisitos","text":"Xcode 9+ iOS 11+","title":"Pre requisitos"},{"location":"#instalacion","text":"Es recomendable usar CocoaPods para instalar el SDK:","title":"Instalaci\u00f3n"},{"location":"#via-cocoapods","text":"Es necesario tener instalado el gestor de paqueter\u00eda, para ello debes ir a la p\u00e1gina web de cocoapods , instalar CocoaPods y luego puedes continuar con los siguientes pasos. Paso 1: V\u00eda terminal, ubicarse en la carpeta del proyecto, donde se encuentra el archivo de extensi\u00f3n .xcodeproj Paso 2: Una vez ubicado en la carpeta del proyecto, ejecutar el siguiente comando: $ pod init Paso 3: Agrega la siguiente l\u00ednea de c\u00f3digo al archivo Podfile : 1 pod \"PagoEfectivoSDK\" Paso 5: Instala el pod y abre el archivo de extensi\u00f3n .xcworkspace : $ pod install $ open yourProject.xcworkspace","title":"V\u00eda CocoaPods"},{"location":"#via-manual","text":"Paso 1: Descargar el archivo PagoEfectivoSDK.framework Paso 2: Abrir tu proyecto con Xcode y agregar el archivo a las secciones Embedded Binaries en el target principal de tu proyecto Aqu\u00ed te dejamos un ejemplo de c\u00f3mo debe agregarse de forma manual:","title":"V\u00eda manual"},{"location":"#configuracion","text":"Para poder hacer uso del SDK es necesario configurar nuestro proyecto seg\u00fan el lenguaje. A continuaci\u00f3n te mostramos como hacerlo con Objective-C o Swift:","title":"Configuraci\u00f3n"},{"location":"#objective-c","text":"Para hacer uso de los m\u00e9todos del SDK de PagoEfectivo bajo un proyecto en Objective-C , debes importar el m\u00f3dulo de PagoEfectivoSDK en el archivo AppDelegate.m del proyecto: 1 #import <PagoEfectivoSDK/PagoEfectivoSDK.h>","title":"Objective-C"},{"location":"#swift","text":"Crear el archivo MyProject -Brigding-Header.h , y establecer la ruta de este archivo en la directiva Objective-C Bridging Header que se encuentra en la secci\u00f3n Build Settings en el target principal del proyecto. Paso 1: En el archivo MyProject -Brigding-Header.h agregar lo siguiente: 1 #import <PagoEfectivoSDK/PagoEfectivoSDK.h> Paso 2: En el archivo AppDelegate.swift agregar lo siguiente: 1 import PagoEfectivoSDK","title":"Swift"},{"location":"#inicializacion","text":"Para poder hacer uso de las funciones que ofrece el SDK, es necesario inicializar la librer\u00eda. Para ello debes tener estos valores previamente: Service Id Access Key Secret Key Info Si a\u00fan no tienes los valores correspondientes favor de comunicarte aqu\u00ed .","title":"Inicializaci\u00f3n"},{"location":"#objective-c_1","text":"Se debe agregar el siguiente c\u00f3digo en el m\u00e9todo application que se encuentra en el archivo AppDelegate.m : 1 2 3 [ PagoEfectivoSDK config : @\"MY_SECRET_KEY\" accessKey : @\"MY_ACCESS_KEY\" serviceId : MY_SERVICE_ID ];","title":"Objective-C"},{"location":"#swift_1","text":"Se debe agregar el siguiente c\u00f3digo en el m\u00e9todo application que se encuentra en el archivo AppDelegate.swift : 1 2 3 PagoEfectivoSDK . config ( \"MY_SECRET_KEY\" , accessKey : \"MY_ACCESS_KEY\" , serviceId : MY_SERVICE_ID )","title":"Swift"},{"location":"#habilitar-el-entorno-de-desarrollo","text":"Para poder hacer uso de las funciones que ofrece el SDK en el entorno de desarrollo, es necesario agregar el par\u00e1metro sandbox :","title":"Habilitar el entorno de desarrollo"},{"location":"#objective-c_2","text":"Se debe agregar el siguiente c\u00f3digo en el m\u00e9todo application que se encuentra en el archivo AppDelegate.m : 1 2 3 4 [ PagoEfectivoSDK config : @\"MY_SECRET_KEY\" accessKey : @\"MY_ACCESS_KEY\" serviceId : MY_SERVICE_ID sandbox : true ];","title":"Objective-C"},{"location":"#swift_2","text":"Se debe agregar el siguiente c\u00f3digo en el m\u00e9todo application que se encuentra en el archivo AppDelegate.swift : 1 2 3 4 PagoEfectivoSDK . config ( \"MY_SECRET_KEY\" , accessKey : \"MY_ACCESS_KEY\" , serviceId : MY_SERVICE_ID , sandbox : true )","title":"Swift"},{"location":"#funcionalidades-del-sdk","text":"El SDK provee las siguientes funcionalidades:","title":"Funcionalidades del SDK"},{"location":"#generacion-de-cip","text":"","title":"Generaci\u00f3n de CIP"},{"location":"#objective-c_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 //Creamos una nueva instancia de tipo CipRequest CipRequest * request = [ CipRequest alloc ]; //Se establecen las propiedades requeridas [ request setAmount : 100.05 ]; [ request setCurrency : USD ]; [ request setTransactionCode : @\"101\" ]; [ request setUserEmail : @\"jhon@doe.com\" ]; //Opcionales [ request setAdminEmail : @\"foo@bar.com\" ]; [ request setDateExpiry : @\"2000-01-31T05:40:00-05:00\" ]; //Debe ingresarse en formato UTC [ request setPaymentConcept : @\"Pago en tienda\" ]; //El concepto de pago [ request setAdditionalData : @\"Se realiz\u00f3 un pago ... \" ]; //Data adicional [ request setUserName : @\"jhon\" ]; [ request setUserLastName : @\"doe\" ]; [ request setUserUbigeo : @\"010101\" ]; //Formato [ request setUserCountry : @\"PERU\" ]; [ request setUserDocumentType : . DNI ]; //El SDK provee una colecci\u00f3n de tipos de documentType [ request setUserDocumentNumber : @\"00000000\" ]; //Por ejemplo el formato de DNI [ request setUserPhone : @\"999999999\" ]; [ request setUserCodeCountry : @\"+51\" ]; //Creamos una variable que almacene nuestra funci\u00f3n que ir\u00e1 de callback para el servicio serviceCallback __block callbackResponse = ^ ( long status , id receivedData , NSError * error ){ //C\u00f3digo para tratar con la respuesta }; //Usamos la funci\u00f3n de generaci\u00f3n de CIP del SDK [[ PagoEfectivoSDK Cip ] generate : EN requestObject : instanceRequest responseHandler : callbackResponse ];","title":"Objective-C"},{"location":"#swift_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 //creamos una nueva instancia de tipo CipRequest let request = CipRequest () request . amount = 100.05 request . currency = . PEN request . transactionCode = \"101\" request . userEmail = \"jhon@doe.com\" //Opcionales request . adminEmail = \"foo@bar.com\" request . dateExpiry = \"2000-01-31T05:40:00-05:00\" //Debe ingresarse en formato UTC request . paymentConcept = \"Pago en tienda\" //El concepto de pago request . additionalData = \"Se realiz\u00f3 un pago ... \" //Data adicional request . userName = \"jhon\" request . userLastName = \"doe\" request . userUbigeo = \"010101\" //Formato request . userCountry = \"PERU\" request . userDocumentType = . DNI //El SDK provee una colecci\u00f3n de tipos de documentType request . userDocumentNumber = \"00000000\" //Por ejemplo el formato de DNI request . userPhone = \"999999999\" request . userCodeCountry = \"+51\" // Usamos la funci\u00f3n de generaci\u00f3n de CIP del SDK PagoEfectivoSDK . cip (). generate (. EN , requestObject : request , responseHandler : { ( status , result , error ) in //C\u00f3digo para tratar con la respuesta del servicio })","title":"Swift"},{"location":"#tratar-la-respuesta-del-servicio","text":"","title":"Tratar la respuesta del servicio"},{"location":"#swift_4","text":"","title":"Swift"},{"location":"#obtencion-de-datos","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 if ( error != nil ){ DispatchQueue . main . async { //Mostramos el error V\u00eda alerta o una vista personalizada. Ejm: self . present ( Help . customAlert ( arrayErrorsForUser : Help . returnErrorFounded ( error : error !), time : 2 ), animated : true , completion : nil ) refresh . stopAnimating () } } else { // Convertimos la respuesta en diccionario guard let dictionary = result as ? [ String : Any ] else { return } guard let data = dictionary [ \"data\" ] as ? [ String : Any ] else { return } // Obtenemos los datos necesarios para nuestra siguiente vista self . dataCip . numberCip = data [ \"cip\" ] as ! Int // Campo: N\u00famero de cip self . dataCip . currencyCip = data [ \"currency\" ] as ! String // Campo: Tipo de moneda self . dataCip . transationCodeCip = data [ \"transactionCode\" ] as ! String // Campo: C\u00f3digo de transacci\u00f3n self . dataCip . amountCip = data [ \"amount\" ] as ! Double // Campo: Monto self . dataCip . dateExpiryCip = data [ \"dateExpiry\" ] as ! String // Campo: Fecha de vencimiento self . dataCip . cipUrl = data [ \"cipUrl\" ] as ! String // Campo: Url de pasarela de pago DispatchQueue . main . async { self . performSegue ( withIdentifier : Global . Segue . showPasarela , sender : self ) refresh . stopAnimating () } }","title":"Obtenci\u00f3n de datos"},{"location":"#abrir-pasarella-en-una-webview","text":"1 2 3 4 5 6 7 8 9 override func tableView ( _ tableView : UITableView , didSelectRowAt indexPath : IndexPath ) { if ( indexPath . row == 0 ) { let webView = WKWebView ( frame : CGRect ( x : 0 , y : 0 , width : self . view . frame . size . width , height : self . view . frame . size . height )) self . view . addSubview ( webView ) let url = URL ( string : self . urlCip . text !) // Url obtenida de la respuesta del cip (data[\"cipUrl\"]) webView . load ( URLRequest ( url : url !)) return } }","title":"Abrir pasarella en una WebView"},{"location":"#consultar-cips","text":"","title":"Consultar CIP(s)"},{"location":"#objective-c_4","text":"1 2 3 4 5 6 7 8 //Definimos un arreglo NSArray * cips = @[ @\"2495383\" , @\"50\" , @\"10\" ] ; //Usamos la funci\u00f3n de b\u00fasqueda de CIPs del SDK [[ PagoEfectivoSDK Cip ] search : cips responseHandler : ^ ( long status , NSMutableArray * cipSearchArray , NSError * error ) { //C\u00f3digo para tratar con la respuesta del servicio }];","title":"Objective-C"},{"location":"#swift_5","text":"1 2 3 4 5 6 7 8 //Definimos un arreglo let cips :[ String ] = [ \"2495383\" , \"50\" , \"10\" ]; //Usamos la funci\u00f3n de b\u00fasqueda de CIPs del SDK PagoEfectivoSDK . cip (). search ( cips , responseHandler : { ( status , resul , error ) in //C\u00f3digo para tratar con la respuesta del servicio }) Info La documentaci\u00f3n de c\u00f3digo esta disponible para revisar a m\u00e1s detalle las funciones presentadas en esta documentaci\u00f3n.","title":"Swift"},{"location":"#feedback","text":"En caso existan dudas, consultas o mejoras en la gu\u00eda, favor de escribir al correo de feedback con el asunto Documentaci\u00f3n PagoEfectivoSDK.","title":"Feedback"}]}